generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URI")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?

    accounts Account[]
    sessions Session[]

    @@map("users")
}

model VerificationToken {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("tokens")
}

enum ContentType {
    MOVIE
    SERIE
    SHORT
}

model Content {
    id               String             @id @default(auto()) @map("_id") @db.ObjectId
    name             String
    description      String
    smallPicture     String
    sponsoredPicture String
    sponsoredVideo   String
    createdAt        DateTime           @default(now())
    updatedAt        DateTime           @updatedAt
    type             ContentType
    sponsored        SponsoredContent[]

    @@map("contents")
}

model SponsoredContent {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    movieId   String   @db.ObjectId
    content   Content  @relation(fields: [movieId], references: [id], onDelete: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("promoted_contents")
}
